// ArtifactForm.js

import React, { useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import ArtifactTypeDropdown from "./ArtifactTypeDropdown";
import TagSelectorList from "./TagSelectorList";
// import TableColumnsList from "./TableColumnsList";
import { Button } from "@/components/ui/button";
import { Form, FormField } from "@/components/ui/form";
import { getTableColumns } from "@/lib/actions";


const formSchema = z.object({
    name: z.string().min(1).max(40),
    website: z.string().url(),
    summary: z.string().min(1).max(255),
    legal_status: z.string().min(1).max(255),
    affiliation: z.string().min(1).max(255),
    functional_role: z.string().min(1).max(255),
    sector_focus: z.string().min(1).max(255),
    scope: z.string().min(1).max(255),
    communities_of_focus: z.string(),
    geographic_mandate: z.string(),
    hq_province: z.string().min(1).max(255),
    hq_city: z.string().min(1).max(255),
    status: z.string().min(1).max(255),
    stage: z.string().min(1).max(255),
    composition: z.string().min(1).max(255),
    size: z.string().min(1).max(255),
    established_date: z.date(),
    created_by: z.string().min(1).max(255),//will this be auto-generated by artifact creator's login name?
    //tags: z.array(tagSchema),
  });

export default function ArtifactForm() {
  const [position, setPosition] = useState("Select Artifact's Type");
  const [selectedTags, setSelectedTags] = useState([]);
  const [tableColumns, setTableColumns] = useState([]);
  const form = useForm({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: "",
      website: "",
      // ... other default values ...
    },
  });

  useEffect(() => {
    if (position) {
      const fetchTableColumns = async () => {
        try {
          const columns = await getTableColumns(position);
          setTableColumns(columns);
        } catch (error) {
          console.error("Error fetching table columns:", error.message);
        }
      };

      fetchTableColumns();
    }
  }, [position]);

  const handleTagSelect = (index, tag) => {
    setSelectedTags((prevTags) => {
      const updatedTags = [...prevTags];
      updatedTags[index] = tag;
      return updatedTags;
    });
  };

  const addTagSelector = () => {
    setSelectedTags((prevTags) => [...prevTags, null]);
  };

  const removeLastTag = () => {
    setSelectedTags((prevTags) => prevTags.slice(0, -1));
  };

  const onSubmit = (values) => {
    console.log(values);
  };

  return (
    <Form {...form}>
      <form noValidate onSubmit={form.handleSubmit(onSubmit)} className="space-y-8 mt-10">
        <ArtifactTypeDropdown position={position} setPosition={setPosition} />
        <TagSelectorList selectedTags={selectedTags} onSelect={handleTagSelect} addTagSelector={addTagSelector} removeLastTag={removeLastTag} />
        {/* <TableColumnsList position={position} tableColumns={tableColumns} /> */}
        <Button type="submit">Submit</Button>
      </form>
    </Form>
  );
}
