/* eslint-disable func-style */
"use client";
import * as React from "react";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { useForm, useState, useEffect } from "react-hook-form";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command";

// const datetime = z.date().datetime();
// Which data should be create/update on ArtifactCreate.jsx?
// Where should be stay this component?
// How can I see those keys data types?
//
const formSchema = z.object({
  name: z.string().min(1).max(40),
  website: z.string().url(),
  summary: z.string().min(1).max(255),
  legal_status: z.string().min(1).max(255),
  affiliation: z.string().min(1).max(255),
  functional_role: z.string().min(1).max(255),
  sector_focus: z.string().min(1).max(255),
  scope: z.string().min(1).max(255),
  communities_of_focus: z.string(),
  geographic_mandate: z.string(),
  hq_province: z.string().min(1).max(255),
  hq_city: z.string().min(1).max(255),
  status: z.string().min(1).max(255),
  stage: z.string().min(1).max(255),
  composition: z.string().min(1).max(255),
  size: z.string().min(1).max(255),
  established_date: z.date(),
  created_by: z.string().min(1).max(255),//will this be auto-generated by artifact creator's login name?
  //tags: z.array(tagSchema),
});

// Mock data for tags
// const tagKeywords = [
//   {
//     value: "media",
//     label: "Media",
//   },
//   {
//     value: "social-innovation",
//     label: "Social Innovation",
//   },
//   {
//     value: "data",
//     label: "Data",
//   }, {
//     value: "education",
//     label: "Education",
//   },
//   {
//     value: "technology-sector",
//     label: "Technology Sector",
//   },
//   {
//     value: "academia",
//     label: "Academia",
//   },
//   {
//     value: "civic-engagement",
//     label: "Civic Engagement",
//   },
//   {
//     value: "artificial-intelligence",
//     label: "Artificial Intelligence",
//   },
// ];

export default function ArtifactCreate() {
  const [open, setOpen] = React.useState(false);
  const [selectedTag, setSelectedTag] = React.useState(null);
  const [selectedTags, setSelectedTags] = React.useState([]); // Change to an array


  const form = useForm({
    resolver: zodResolver(formSchema),
    //Do we need any default values?
    defaultValues: {
      name: "",
      website: "",
    },
  });

  // free to delete this function
  function onSubmit(values) {
    console.log(values);
  }

  const handleTagSelect = (index, tag) => {
    setSelectedTags((prevTags) => {
      const updatedTags = [...prevTags];
      updatedTags[index] = tag;
      return updatedTags;
    });
  };

  const addTagSelector = () => {
    setSelectedTags((prevTags) => [...prevTags, null]);
  };

  const removeLastTag = () => {
    setSelectedTags((prevTags) => prevTags.slice(0, -1));
    setOpen(false);
  };

  return (
    <Form {...form}>
      <form
        noValidate
        onSubmit={form.handleSubmit(onSubmit)}
        className="space-y-8"
      >
        <div>
          <FormField
            control={form.control}
            name="name"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Name</FormLabel>
                <FormControl>
                  <Input type="" placeholder="Name" {...field} />
                </FormControl>
                <FormDescription></FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            control={form.control}
            name="website"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Website</FormLabel>
                <FormControl>
                  <Input placeholder="Website" {...field} />
                </FormControl>
                <FormDescription></FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="summary"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Summary</FormLabel>
                <FormControl>
                  <Input placeholder="summary" {...field} />
                </FormControl>
                <FormDescription></FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="affiliation"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Affiliation</FormLabel>
                <FormControl>
                  <Input placeholder="affiliation" {...field} />
                </FormControl>
                <FormDescription></FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="scope"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Scope</FormLabel>
                <FormControl>
                  <Input placeholder="scope" {...field} />
                </FormControl>
                <FormDescription></FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="communities_of_focus"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Communities of Focus</FormLabel>
                <FormControl>
                  <Input placeholder="communities_of_focus" {...field} />
                </FormControl>
                <FormDescription></FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="geographic_mandate"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Geographic Mandate</FormLabel>
                <FormControl>
                  <Input placeholder="geographic_mandate" {...field} />
                </FormControl>
                <FormDescription></FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="hq_province"
            render={({ field }) => (
              <FormItem>
                <FormLabel>HQ Province</FormLabel>
                <FormControl>
                  <Input placeholder="hq_province" {...field} />
                </FormControl>
                <FormDescription></FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="hq_city"
            render={({ field }) => (
              <FormItem>
                <FormLabel>HQ City</FormLabel>
                <FormControl>
                  <Input placeholder="hq_city" {...field} />
                </FormControl>
                <FormDescription></FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="status"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Status</FormLabel>
                <FormControl>
                  <Input placeholder="status" {...field} />
                </FormControl>
                <FormDescription></FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="stage"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Stage</FormLabel>
                <FormControl>
                  <Input placeholder="stage" {...field} />
                </FormControl>
                <FormDescription></FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField

            control={form.control}
            name="composition"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Composition</FormLabel>
                <FormControl>
                  <Input placeholder="composition" {...field} />
                </FormControl>
                <FormDescription></FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="size"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Size</FormLabel>
                <FormControl>
                  <Input placeholder="size" {...field} />
                </FormControl>
                <FormDescription></FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="established_date"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Established Date</FormLabel>
                <FormControl>
                  <Input placeholder="established_date" {...field} />
                </FormControl>
                <FormDescription></FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="created_by"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Created By</FormLabel>
                <FormControl>
                  <Input placeholder="created_by" {...field} />
                </FormControl>
                <FormDescription></FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />
          {/* <FormField
          control={form.control}
          name="created_on"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Created On</FormLabel>
              <FormControl>
                <Input placeholder="created_on" {...field} />
              </FormControl>
              <FormDescription></FormDescription>
              <FormMessage />
            </FormItem>
          )}
        /> */}

        </div>
        <FormField
          control={form.control}
          name="tags"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Tags</FormLabel>
              {selectedTags.map((selectedTag, index) => (
                <div key={index} className="mb-2">
                  <TagSelector
                    selectedTag={selectedTag}
                    onSelect={(tag) => handleTagSelect(index, tag)}
                  />
                </div>
              ))}
              <Button type="button" onClick={addTagSelector}>
                Add Tag
              </Button>
              {selectedTags.length > 0 && (
                <Button type="button" onClick={removeLastTag}>
                  Remove Last Tag
                </Button>
              )}
              <FormDescription></FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />

        <Button type="submit">Submit</Button>
      </form>
    </Form>
  );
}

//Seperate component for tag selector. 
function TagSelector({ selectedTag, onSelect }) {
  const [open, setOpen] = React.useState(false);

  const tagKeywords = [
    {
      value: "media",
      label: "Media",
    },
    {
      value: "social-innovation",
      label: "Social Innovation",
    },
    {
      value: "data",
      label: "Data",
    }, {
      value: "education",
      label: "Education",
    },
    {
      value: "technology-sector",
      label: "Technology Sector",
    },
    {
      value: "academia",
      label: "Academia",
    },
    {
      value: "civic-engagement",
      label: "Civic Engagement",
    },
    {
      value: "artificial-intelligence",
      label: "Artificial Intelligence",
    },
  ];
  
  return (
    <Popover open={open} onOpenChange={setOpen}>
      <PopoverTrigger asChild>
        <Button
          variant="outline"
          size="sm"
          className="w-[150px] justify-start"
        >
          {selectedTag ? (
            <>
              {selectedTag.label}
            </>
          ) : (
            <>+ Add a tag</>
          )}
        </Button>
      </PopoverTrigger>
      <PopoverContent className="p-0" side="right" align="start">
        <Command>
          <CommandInput placeholder="Find a proper tag..." />
          <CommandList>
            <CommandEmpty>No results found.</CommandEmpty>
            <CommandGroup>
              {tagKeywords.map((tag) => (
                <CommandItem
                  key={tag.value}
                  value={tag.value}
                  onSelect={(value) => {
                    onSelect(tag);
                    setOpen(false);
                  }}
                >
                  <span>{tag.label}</span>
                </CommandItem>
              ))}
            </CommandGroup>
          </CommandList>
        </Command>
      </PopoverContent>
    </Popover>
  );
}