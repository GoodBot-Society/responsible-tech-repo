/* eslint-disable func-style */
"use client";
import * as React from "react";
import { useState, useEffect } from "react";

import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { useForm } from "react-hook-form";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuLabel,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
//import { set } from "date-fns";
import { getTableColumns } from "@/lib/actions";

const formSchema = z.object({
  name: z.string().min(1).max(40),
  website: z.string().url(),
  summary: z.string().min(1).max(255),
  legal_status: z.string().min(1).max(255),
  affiliation: z.string().min(1).max(255),
  functional_role: z.string().min(1).max(255),
  sector_focus: z.string().min(1).max(255),
  scope: z.string().min(1).max(255),
  communities_of_focus: z.string(),
  geographic_mandate: z.string(),
  hq_province: z.string().min(1).max(255),
  hq_city: z.string().min(1).max(255),
  status: z.string().min(1).max(255),
  stage: z.string().min(1).max(255),
  composition: z.string().min(1).max(255),
  size: z.string().min(1).max(255),
  established_date: z.date(),
  created_by: z.string().min(1).max(255),//will this be auto-generated by artifact creator's login name?
  //tags: z.array(tagSchema),
});


export default function ArtifactCreate() {
  const [position, setPosition] = React.useState("Select Artifact's Type"); //artifact types
  // const [selectedComponent, setSelectedComponent] = React.useState(null); //artifact types
  const [open, setOpen] = React.useState(false);
  const [selectedTags, setSelectedTags] = React.useState([]);

  const [tableColumns, setTableColumns] = React.useState([]);

  useEffect(() => {
    console.log("Position:", position);
    if (position) {
      const fetchTableColumns = async () => {
        try {
          const columns = await getTableColumns(position);
          console.log("Fetched Columns:", columns);

          setTableColumns(columns);
        } catch (error) {
          console.error('Error fetching table columns:', error.message);
        }
      };

      fetchTableColumns();
    }
  }, [position]);

  const form = useForm({
    resolver: zodResolver(formSchema),
    //Do we need any default values?
    defaultValues: {
      name: "",
      website: "", // or any other default value
    },
  });

  // free to delete test function
  function onSubmit(values) {
    console.log(values);
  }

  const handleTagSelect = (index, tag) => {
    setSelectedTags((prevTags) => {
      const updatedTags = [...prevTags];
      updatedTags[index] = tag;
      return updatedTags;
    });
  };

  const addTagSelector = () => {
    setSelectedTags((prevTags) => [...prevTags, null]);
  };

  const removeLastTag = () => {
    setSelectedTags((prevTags) => prevTags.slice(0, -1));
    setOpen(false);
  };


const artifactTypes = [
  "Litigation",
  "Policy",
  "Resource",
  "Stakeholder",
  "Organization",
];
console.log(`test table columns:`);
console.log(getTableColumns('Litigation'))
  return (
//     <Form {...form}>
//       <form
//         noValidate
//         onSubmit={form.handleSubmit(onSubmit)}
//         className="space-y-8 mt-10"
//       >
//         <div>
//           <DropdownMenu>
//               <p>artifact type:</p>
//             <DropdownMenuTrigger asChild>
//               <Button variant="outline">{position ? (
//                 <>
//                   {position}
//                 </>
//               ) : (<>Types</>)}</Button>
//             </DropdownMenuTrigger>
//             <DropdownMenuContent className="w-56">
//               <DropdownMenuLabel>Types</DropdownMenuLabel>
//               <DropdownMenuSeparator />
//               <DropdownMenuRadioGroup value={position} onValueChange={setPosition}>
//                 <DropdownMenuRadioItem value="Litigation">Litigation</DropdownMenuRadioItem>
//                 <DropdownMenuRadioItem value="Policy">Policy</DropdownMenuRadioItem>
//                 <DropdownMenuRadioItem value="Resourse">Resourse</DropdownMenuRadioItem>
//                 <DropdownMenuRadioItem value="Stakeholder">Stakeholder</DropdownMenuRadioItem>
//                 <DropdownMenuRadioItem value="Organization">Organization</DropdownMenuRadioItem>
//               </DropdownMenuRadioGroup>
//             </DropdownMenuContent>
//           </DropdownMenu>
//         </div>
        
// <select value={ArtifactCreate} onChange={(e)=> {
//   setPosition(e.target.value);
//   console.log(e.target.value);
// }}>
//   <option value=""> option...</option>
//   {artifactTypes.map((artifactType) => (
//     <option key={artifactType} value={artifactType}>
//       {artifactType}
//     </option>))}


// </select>


//         <FormField
//           control={form.control}
//           name="tags"
//           render={({ field }) => (
//             <FormItem >
//               <FormLabel className="mr-4">Tags</FormLabel>
//               {selectedTags.map((selectedTag, index) => (
//                 <div key={index} className="mb-2.5">
//                   <TagSelector
//                     selectedTag={selectedTag}
//                     onSelect={(tag) => handleTagSelect(index, tag)}
//                   />
//                 </div>
//               ))}
//               <Button className="mr-4" type="button" onClick={addTagSelector}>
//                 Add Tag
//               </Button>
//               {selectedTags.length > 0 && (
//                 <Button className=" mr-4" type="button" onClick={removeLastTag}>
//                   Remove Last Tag
//                 </Button>
//               )}
//               <FormDescription></FormDescription>
//               <FormMessage />
//             </FormItem>
//           )}
//         />

//         <Button type="submit">Submit</Button>
//       </form>
//     </Form>
       <Form {...form}>
<form
  noValidate
  onSubmit={form.handleSubmit(onSubmit)}
  className="space-y-8 mt-10"
>
  {/* ... (other form elements) */}

  {/* Display fetched table columns */}
  <div>
    <h2>Table Columns for {position}</h2>
    <ul>
      {tableColumns.map((column) => (
        <li key={column.column_name}>{column.column_name}</li>
      ))}
    </ul>
  </div>

  <Button type="submit">Submit</Button>
</form>
</Form>
  );
}

//Seperate component for tag selector. 
function TagSelector({ selectedTag, onSelect }) {
  const [open, setOpen] = React.useState(false);

  const tagKeywords = [
    {
      value: "media",
      label: "Media",
    },
    {
      value: "social-innovation",
      label: "Social Innovation",
    },
    {
      value: "data",
      label: "Data",
    }, {
      value: "education",
      label: "Education",
    },
    {
      value: "technology-sector",
      label: "Technology Sector",
    },
    {
      value: "academia",
      label: "Academia",
    },
    {
      value: "civic-engagement",
      label: "Civic Engagement",
    },
    {
      value: "artificial-intelligence",
      label: "Artificial Intelligence",
    },
  ];

  return (
    <Popover open={open} onOpenChange={setOpen}>
      <PopoverTrigger asChild>
        <Button
          variant="outline"
          size="sm"
          className="w-[150px] justify-start"
        >
          {selectedTag ? (
            <>
              {selectedTag.label}
            </>
          ) : (
            <>+ Add a tag</>
          )}
        </Button>
      </PopoverTrigger>
      <PopoverContent className="p-0" side="right" align="start">
        <Command>
          <CommandInput placeholder="Find a proper tag..." />
          <CommandList>
            <CommandEmpty>No results found.</CommandEmpty>
            <CommandGroup>
              {tagKeywords.map((tag) => (
                <CommandItem
                  key={tag.value}
                  value={tag.value}
                  onSelect={(value) => {
                    onSelect(tag);
                    setOpen(false);
                  }}
                >
                  <span>{tag.label}</span>
                </CommandItem>
              ))}
            </CommandGroup>
          </CommandList>
        </Command>
      </PopoverContent>
    </Popover>
  );
}