"use client";
// import React from 'react';
import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from "zod";
// import { formSchema } from '@/lib/schemas';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import {
    Form,
    FormControl,
    FormDescription,
    FormField,
    FormItem,
    FormLabel,
    FormMessage,
} from "@/components/ui/form";
import { supabase } from "@/lib/client";


const formSchema = z.object({
    // "litigation_id": z.string().min(1).max(255), // this be auto-generated by the system
    "name": z.string().min(1).max(40),
    "link": z.string().url(),
    "summary": z.string().min(1).max(255),
    "country": z.string().min(1).max(255),
    "status": z.string().min(1).max(255),
    "mandate": z.string().min(1).max(255),
    // "startDate": z.string().min(1).max(255),
    "jurisdiction": z.string().min(1).max(255),
    "created_by": z.string(),
    "modified_by": z.string(),
    "modified_on": z.string().min(1).max(255),
    "tags": z.string().min(1).max(255),
});

export default function LitigationFormFields() {

    const [formData, setFormData] = useState({
        // litigation_id: '',
        name: '',
        link: '',
        summary: '',
        country: '',
        status: '',
        mandate: '',
        startDate: '',
        jurisdiction: '',
        created_by: '',
        modified_by: '',
        modified_on: '',
        tags: '',
        // some column will not fill in the form, so we can ignore them like; created_by, modified_by, modified_on
    });

    const form = useForm({
        resolver: zodResolver(formSchema),
        //Do we need any default values?
        defaultValues: {
            litigation_id: '',
            name: "",
            summary: "",
            // startDate: '2024-01-01' // or any other default value
        },
    });

    const handleSubmit = async (e) => {
        console.log('handleSubmit called');
        e.preventDefault();


        // Check if startDate is a non-empty string and a valid date
        if (!formData.startDate || formData.startDate.trim() === '' || isNaN(new Date(formData.startDate))) {
            console.error('Error inserting data: startDate is empty or not a valid date');
            return;
        }
        // Check if startDate is a non-empty string
        if (!formData.startDate || formData.startDate.trim() === '') {
            console.error('Error inserting data: startDate cannot be empty');
            return;
        }



        // Insert the form data into the Litigation table
        const { data, error } = await supabase.from('Litigation').insert([formData]);
        console.log(data, error);
        if (error) {
            console.error('Error inserting data:', error.message);
        } else {
            console.log('Data inserted successfully:', data);
            // Handle success or redirect to another page
        }
    };

    const handleChange = (e) => {
        if (e.target.name === 'startDate') {
            // Check for a non-empty string and valid date format
            if (e.target.value.trim() !== '' && isNaN(new Date(e.target.value))) {
                console.error('Invalid date format for startDate');
                return;
            }
        }

        setFormData({ ...formData, [e.target.name]: e.target.value });
        console.log('Updated form data:', formData);
    };


    async function insertData() {
        const { data, error } = await supabase.from('Litigation').insert([formData]);
        if (error) {
            console.error('Error inserting data:', error.message, 'Full error:', error);
        } else {
            console.log('Data inserted successfully:', data);
        }
    }

    insertData();

    return (

        <div>
            <form onSubmit={handleSubmit}>
                {/* Add input fields for each column in your Litigation table */}
                <label>
                    Name:
                    <Input type="text" name="name" value={formData.name} onChange={handleChange} />
                </label>
                <label>
                    StartDate:
                    <Input type="date" name="startDate" value={formData.startDate} onChange={handleChange} />
                </label>

                {/* Add similar labels and inputs for other columns */}

                <Button type="submit">Submit</Button>
            </form>
        </div>
    );
}